<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <identifier>
      <name> test </name>
      <kind> static </kind>
      <isdefinition> True </isdefinition>
      <type> boolean </type>
      <index> 0 </index>
    </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <identifier>
      <name> main </name>
      <kind> function </kind>
      <isdefinition> True </isdefinition>
      <type> void </type>
      <index> -1 </index>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <identifier>
          <name> game </name>
          <kind> var </kind>
          <isdefinition> True </isdefinition>
          <type> SquareGame </type>
          <index> 0 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <name> game </name>
            <kind> var </kind>
            <isdefinition> False </isdefinition>
            <type> SquareGame </type>
            <index> 0 </index>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> . </symbol>
              <identifier>
                <name> SquareGame </name>
                <kind> class </kind>
                <isdefinition> False </isdefinition>
                <type> class </type>
                <index> -1 </index>
              </identifier>
              <identifier>
                <name> new </name>
                <kind> subroutine </kind>
                <isdefinition> False </isdefinition>
                <type> subroutine </type>
                <index> -1 </index>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>
            <name> game </name>
            <kind> class </kind>
            <isdefinition> False </isdefinition>
            <type> class </type>
            <index> -1 </index>
          </identifier>
          <identifier>
            <name> run </name>
            <kind> subroutine </kind>
            <isdefinition> False </isdefinition>
            <type> subroutine </type>
            <index> -1 </index>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>
            <name> game </name>
            <kind> class </kind>
            <isdefinition> False </isdefinition>
            <type> class </type>
            <index> -1 </index>
          </identifier>
          <identifier>
            <name> dispose </name>
            <kind> subroutine </kind>
            <isdefinition> False </isdefinition>
            <type> subroutine </type>
            <index> -1 </index>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <identifier>
      <name> more </name>
      <kind> function </kind>
      <isdefinition> True </isdefinition>
      <type> void </type>
      <index> -1 </index>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <identifier>
          <name> i </name>
          <kind> var </kind>
          <isdefinition> True </isdefinition>
          <type> int </type>
          <index> 1 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> j </name>
          <kind> var </kind>
          <isdefinition> True </isdefinition>
          <type> int </type>
          <index> 2 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <identifier>
          <name> s </name>
          <kind> var </kind>
          <isdefinition> True </isdefinition>
          <type> String </type>
          <index> 3 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <identifier>
          <name> a </name>
          <kind> var </kind>
          <isdefinition> True </isdefinition>
          <type> Array </type>
          <index> 4 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> s </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> String </type>
                <index> 3 </index>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <stringConstant> string constant </stringConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> s </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> String </type>
                <index> 3 </index>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <keyword> null </keyword>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> a </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> Array </type>
                <index> 4 </index>
              </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <name> a </name>
                    <kind> var </kind>
                    <isdefinition> False </isdefinition>
                    <type> Array </type>
                    <index> 4 </index>
                  </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> i </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> int </type>
                <index> 1 </index>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <name> i </name>
                    <kind> var </kind>
                    <isdefinition> False </isdefinition>
                    <type> int </type>
                    <index> 1 </index>
                  </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <identifier>
                          <name> j </name>
                          <kind> var </kind>
                          <isdefinition> False </isdefinition>
                          <type> int </type>
                          <index> 2 </index>
                        </identifier>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> j </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> int </type>
                <index> 2 </index>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <name> j </name>
                    <kind> var </kind>
                    <isdefinition> False </isdefinition>
                    <type> int </type>
                    <index> 2 </index>
                  </identifier>
                </term>
                <symbol> / </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <name> i </name>
                <kind> var </kind>
                <isdefinition> False </isdefinition>
                <type> int </type>
                <index> 1 </index>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <name> i </name>
                    <kind> var </kind>
                    <isdefinition> False </isdefinition>
                    <type> int </type>
                    <index> 1 </index>
                  </identifier>
                </term>
                <symbol> | </symbol>
                <term>
                  <identifier>
                    <name> j </name>
                    <kind> var </kind>
                    <isdefinition> False </isdefinition>
                    <type> int </type>
                    <index> 2 </index>
                  </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
